import express from 'express';
import cors from 'cors';
import { GoogleGenAI, Modality } from '@google/genai';

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

if (!GEMINI_API_KEY) {
  console.error('ERROR: GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Gemini
const genAI = new GoogleGenAI({ apiKey: GEMINI_API_KEY });

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
app.post('/api/generate-image', async (req, res) => {
  try {
    const { imageData, prompt } = req.body;

    if (!imageData || !prompt) {
      return res.status(400).json({ 
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: imageData –∏ prompt' 
      });
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º mimeType –∏ base64 –¥–∞–Ω–Ω—ã–µ –∏–∑ data URL
    const match = imageData.match(/^data:(image\/\w+);base64,(.*)$/);
    if (!match) {
      return res.status(400).json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç imageData. –û–∂–∏–¥–∞–µ—Ç—Å—è data:image/...;base64,...' 
      });
    }

    const [, mimeType, base64Data] = match;

    const imagePart = {
      inlineData: { mimeType, data: base64Data },
    };

    const textPart = { text: prompt };

    // –í—ã–∑—ã–≤–∞–µ–º Gemini API —Å —Å–µ—Ä–≤–µ—Ä–∞
    const maxRetries = 5;
    let lastError = null;

    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        const response = await genAI.models.generateContent({
          model: 'gemini-2.5-flash-image',
          contents: { parts: [imagePart, textPart] },
          config: {
            responseModalities: [Modality.IMAGE],
          },
        });

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        const imagePartFromResponse = response.candidates?.[0]?.content?.parts?.find(
          part => part.inlineData
        );

        if (imagePartFromResponse?.inlineData) {
          const { mimeType: responseMimeType, data: responseData } = imagePartFromResponse.inlineData;
          const imageDataUrl = `data:${responseMimeType};base64,${responseData}`;
          return res.json({ imageDataUrl });
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ –æ—à–∏–±–∫—É
        const textResponse = response.text;
        throw new Error(`–ú–æ–¥–µ–ª—å –ò–ò –æ—Ç–≤–µ—Ç–∏–ª–∞ —Ç–µ–∫—Å—Ç–æ–º –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: "${textResponse || '–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.'}"`);

      } catch (error) {
        lastError = error;
        const errorMessage = error instanceof Error ? error.message : JSON.stringify(error);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ–π
        const isRetriable = (
          errorMessage.toLowerCase().includes('internal') ||
          errorMessage.includes('"code":500') ||
          errorMessage.toLowerCase().includes('resource_exhausted') ||
          errorMessage.toLowerCase().includes('rate_limit') ||
          errorMessage.toLowerCase().includes('quota') ||
          errorMessage.includes('429') ||
          errorMessage.includes('503') ||
          errorMessage.toLowerCase().includes('unavailable') ||
          errorMessage.toLowerCase().includes('timeout') ||
          errorMessage.toLowerCase().includes('timed out') ||
          errorMessage.toLowerCase().includes('network') ||
          errorMessage.toLowerCase().includes('fetch failed')
        );

        if (isRetriable && attempt < maxRetries) {
          const backoff = 1000 * Math.pow(2, attempt - 1);
          const jitter = backoff * (0.5 + Math.random());
          const delay = Math.min(backoff + jitter, 15000);
          console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} —á–µ—Ä–µ–∑ ${Math.round(delay)}ms...`);
          await new Promise(resolve => setTimeout(resolve, delay));
          continue;
        }

        // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ "–Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", –ø—Ä–æ–±—É–µ–º fallback –ø—Ä–æ–º–ø—Ç
        if (errorMessage.includes('–ú–æ–¥–µ–ª—å –ò–ò –æ—Ç–≤–µ—Ç–∏–ª–∞ —Ç–µ–∫—Å—Ç–æ–º –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')) {
          if (attempt === 1) {
            // –ü—Ä–æ–±—É–µ–º —Å fallback –ø—Ä–æ–º–ø—Ç–æ–º
            const fallbackPrompt = 'Generate a professional, high-resolution business portrait of the person in this image. The style should be suitable for a corporate setting like a LinkedIn profile. The result should be a clear, photorealistic portrait against a neutral background.';
            try {
              const fallbackResponse = await genAI.models.generateContent({
                model: 'gemini-2.5-flash-image',
                contents: { parts: [imagePart, { text: fallbackPrompt }] },
                config: {
                  responseModalities: [Modality.IMAGE],
                },
              });

              const fallbackImagePart = fallbackResponse.candidates?.[0]?.content?.parts?.find(
                part => part.inlineData
              );

              if (fallbackImagePart?.inlineData) {
                const { mimeType: responseMimeType, data: responseData } = fallbackImagePart.inlineData;
                const imageDataUrl = `data:${responseMimeType};base64,${responseData}`;
                return res.json({ imageDataUrl });
              }
            } catch (fallbackError) {
              console.error('Fallback –ø—Ä–æ–º–ø—Ç —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', fallbackError);
            }
          }
        }

        throw error;
      }
    }

    throw lastError || new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫');

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    const errorMessage = error instanceof Error ? error.message : String(error);
    res.status(500).json({ 
      error: `–ú–æ–¥–µ–ª—å –ò–ò –Ω–µ —Å–º–æ–≥–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –î–µ—Ç–∞–ª–∏: ${errorMessage}` 
    });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞
app.post('/api/detect-gender', async (req, res) => {
  try {
    const { imageData } = req.body;

    if (!imageData) {
      return res.status(400).json({ 
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: imageData' 
      });
    }

    const match = imageData.match(/^data:(image\/\w+);base64,(.*)$/);
    if (!match) {
      return res.status(400).json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç imageData' 
      });
    }

    const [, mimeType, base64Data] = match;

    const imagePart = {
      inlineData: { mimeType, data: base64Data },
    };

    const instruction = {
      text: "You are a precise classifier. Determine the gender presentation of the primary person in the image. Respond in STRICT JSON only, no prose, no code fences: {\n  \"gender\": \"male|female|unknown\",\n  \"confidence\": number between 0 and 1\n}.",
    };

    try {
      const response = await genAI.models.generateContent({
        model: 'gemini-2.0-flash',
        contents: { parts: [imagePart, instruction] },
        config: {
          responseModalities: [Modality.TEXT],
        },
      });

      const raw = (response.text || '').toString();
      let parsed = null;
      
      // –£–±–∏—Ä–∞–µ–º code fences –µ—Å–ª–∏ –µ—Å—Ç—å
      const cleaned = raw.trim().replace(/^```[a-zA-Z]*\n?/, '').replace(/```$/, '');
      
      try {
        parsed = JSON.parse(cleaned);
      } catch {
        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON –≤ —Ç–µ–∫—Å—Ç–µ
        const jsonMatch = cleaned.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          parsed = JSON.parse(jsonMatch[0]);
        }
      }

      if (parsed && (parsed.gender === 'male' || parsed.gender === 'female' || parsed.gender === 'unknown')) {
        const confidence = Math.max(0, Math.min(1, Number(parsed.confidence) || 0));
        return res.json({ gender: parsed.gender, confidence });
      }

      // Fallback: –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É
      const text = raw.trim().toLowerCase();
      if (text.includes('male') || text.includes('–º—É–∂')) {
        return res.json({ gender: 'male', confidence: 0.5 });
      }
      if (text.includes('female') || text.includes('–∂–µ–Ω')) {
        return res.json({ gender: 'female', confidence: 0.5 });
      }

      return res.json({ gender: 'unknown', confidence: 0 });

    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞:', error);
      return res.json({ gender: 'unknown', confidence: 0 });
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–ª–∞:', error);
    res.status(500).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª' 
    });
  }
});

// Health check
app.get('/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì° API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://0.0.0.0:${PORT}`);
});

